"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert = __importStar(require("assert"));
var list_1 = require("./list");
describe('list', function () {
    it('len', function () {
        // 0-1-many: base case, 0 recursive calls (only 1 possible input)
        assert.deepStrictEqual((0, list_1.len)(list_1.nil), 0);
        // 0-1-many: 1 recursive call
        assert.deepStrictEqual((0, list_1.len)((0, list_1.cons)(1, list_1.nil)), 1);
        assert.deepStrictEqual((0, list_1.len)((0, list_1.cons)(2, list_1.nil)), 1);
        // 0-1-many: 2+ recursive calls
        assert.deepStrictEqual((0, list_1.len)((0, list_1.cons)(1, (0, list_1.cons)(2, list_1.nil))), 2);
        assert.deepStrictEqual((0, list_1.len)((0, list_1.cons)(3, (0, list_1.cons)(2, (0, list_1.cons)(1, (0, list_1.cons)(0, list_1.nil))))), 4);
    });
    it('equal', function () {
        // 0-1-many: 0 recursive calls - first branch
        assert.deepStrictEqual((0, list_1.equal)(list_1.nil, list_1.nil), true);
        assert.deepStrictEqual((0, list_1.equal)(list_1.nil, (0, list_1.cons)(1, list_1.nil)), false);
        // 0-1-many: 0 recursive calls - second branch
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(1, list_1.nil), list_1.nil), false);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(1, (0, list_1.cons)(2, list_1.nil)), list_1.nil), false);
        // 0-1-many: 0 recursive calls - third branch
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(1, list_1.nil), (0, list_1.cons)(2, list_1.nil)), false);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(2, list_1.nil), (0, list_1.cons)(1, (0, list_1.cons)(2, list_1.nil))), false);
        // 0-1-many: 1 recursive call - first branch
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(3, list_1.nil), (0, list_1.cons)(3, list_1.nil)), true);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(3, list_1.nil), (0, list_1.cons)(3, (0, list_1.cons)(1, list_1.nil))), false);
        // 0-1-many: 1 recursive call - second branch
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(4, (0, list_1.cons)(1, list_1.nil)), (0, list_1.cons)(4, list_1.nil)), false);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(4, (0, list_1.cons)(1, (0, list_1.cons)(2, list_1.nil))), (0, list_1.cons)(4, list_1.nil)), false);
        // 0-1-many: 1 recursive call - third branch
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(5, (0, list_1.cons)(1, list_1.nil)), (0, list_1.cons)(5, (0, list_1.cons)(2, list_1.nil))), false);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(5, (0, list_1.cons)(2, list_1.nil)), (0, list_1.cons)(5, (0, list_1.cons)(1, (0, list_1.cons)(2, list_1.nil)))), false);
        // 0-1-many: 2 recursive calls - first branch
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(4, (0, list_1.cons)(3, list_1.nil)), (0, list_1.cons)(4, (0, list_1.cons)(3, list_1.nil))), true);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(4, (0, list_1.cons)(3, list_1.nil)), (0, list_1.cons)(4, (0, list_1.cons)(3, (0, list_1.cons)(1, list_1.nil)))), false);
        // 0-1-many: 2 recursive calls - second branch
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(4, (0, list_1.cons)(3, (0, list_1.cons)(1, list_1.nil))), (0, list_1.cons)(4, (0, list_1.cons)(3, list_1.nil))), false);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(4, (0, list_1.cons)(3, (0, list_1.cons)(1, (0, list_1.cons)(2, list_1.nil)))), (0, list_1.cons)(4, (0, list_1.cons)(3, list_1.nil))), false);
        // 0-1-many: 2 recursive calls - third branch
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(4, (0, list_1.cons)(3, (0, list_1.cons)(1, list_1.nil))), (0, list_1.cons)(4, (0, list_1.cons)(3, (0, list_1.cons)(2, list_1.nil)))), false);
        assert.deepStrictEqual((0, list_1.equal)((0, list_1.cons)(4, (0, list_1.cons)(3, (0, list_1.cons)(2, list_1.nil))), (0, list_1.cons)(4, (0, list_1.cons)(3, (0, list_1.cons)(1, (0, list_1.cons)(2, list_1.nil))))), false);
    });
    it('at', function () {
        var L0 = list_1.nil;
        var L1 = (0, list_1.cons)(5, list_1.nil);
        var L2 = (0, list_1.cons)(4, (0, list_1.cons)(5, list_1.nil));
        var L3 = (0, list_1.cons)(1, (0, list_1.cons)(2, (0, list_1.cons)(3, list_1.nil)));
        var L4 = (0, list_1.cons)(9, (0, list_1.cons)(8, (0, list_1.cons)(7, (0, list_1.cons)(6, list_1.nil))));
        // 0-1-many: 0 recursive calls, top branch
        assert.throws(function () { return (0, list_1.at)(-1, L0); });
        assert.throws(function () { return (0, list_1.at)(0, L0); });
        assert.throws(function () { return (0, list_1.at)(-1, L1); });
        assert.throws(function () { return (0, list_1.at)(1, L1); });
        // 0-1-many: 0 recursive calls, middle branch
        assert.deepStrictEqual((0, list_1.at)(0, L1), 5);
        assert.deepStrictEqual((0, list_1.at)(0, L2), 4);
        assert.deepStrictEqual((0, list_1.at)(0, L3), 1);
        // 0-1-many: 1 recursive call, top branch
        assert.throws(function () { return (0, list_1.at)(1, L0); });
        assert.throws(function () { return (0, list_1.at)(1, (0, list_1.cons)(7, list_1.nil)); });
        // 0-1-many: 1 recursive call, middle branch
        assert.deepStrictEqual((0, list_1.at)(1, L2), 5);
        assert.deepStrictEqual((0, list_1.at)(1, L3), 2);
        // 0-1-many: 2+ recursive calls
        assert.deepStrictEqual((0, list_1.at)(2, L3), 3);
        assert.deepStrictEqual((0, list_1.at)(2, L4), 7);
        assert.deepStrictEqual((0, list_1.at)(3, L4), 6);
        assert.throws(function () { return (0, list_1.at)(3, L3); });
        assert.throws(function () { return (0, list_1.at)(4, L4); });
    });
    it('concat', function () {
        // 0-1-many: base case, 0 recursive calls
        assert.deepStrictEqual((0, list_1.concat)(list_1.nil, list_1.nil), list_1.nil);
        assert.deepStrictEqual((0, list_1.concat)(list_1.nil, (0, list_1.cons)(1, list_1.nil)), (0, list_1.cons)(1, list_1.nil));
        assert.deepStrictEqual((0, list_1.concat)(list_1.nil, (0, list_1.cons)(1, (0, list_1.cons)(2, list_1.nil))), (0, list_1.cons)(1, (0, list_1.cons)(2, list_1.nil)));
        // 0-1-many: 1 recursive call
        assert.deepStrictEqual((0, list_1.concat)((0, list_1.cons)(1, list_1.nil), list_1.nil), (0, list_1.cons)(1, list_1.nil));
        assert.deepStrictEqual((0, list_1.concat)((0, list_1.cons)(1, list_1.nil), (0, list_1.cons)(2, list_1.nil)), (0, list_1.cons)(1, (0, list_1.cons)(2, list_1.nil)));
        assert.deepStrictEqual((0, list_1.concat)((0, list_1.cons)(1, list_1.nil), (0, list_1.cons)(2, (0, list_1.cons)(3, list_1.nil))), (0, list_1.cons)(1, (0, list_1.cons)(2, (0, list_1.cons)(3, list_1.nil))));
        // 0-1-many: 2+ recursive call
        assert.deepStrictEqual((0, list_1.concat)((0, list_1.cons)(1, (0, list_1.cons)(2, list_1.nil)), list_1.nil), (0, list_1.cons)(1, (0, list_1.cons)(2, list_1.nil)));
        assert.deepStrictEqual((0, list_1.concat)((0, list_1.cons)(1, (0, list_1.cons)(2, list_1.nil)), (0, list_1.cons)(3, list_1.nil)), (0, list_1.cons)(1, (0, list_1.cons)(2, (0, list_1.cons)(3, list_1.nil))));
        assert.deepStrictEqual((0, list_1.concat)((0, list_1.cons)(1, (0, list_1.cons)(2, list_1.nil)), (0, list_1.cons)(3, (0, list_1.cons)(4, list_1.nil))), (0, list_1.cons)(1, (0, list_1.cons)(2, (0, list_1.cons)(3, (0, list_1.cons)(4, list_1.nil)))));
    });
    it('rev', function () {
        // 0-1-many: base case (only 1 possible)
        assert.deepStrictEqual((0, list_1.rev)(list_1.nil), list_1.nil);
        // 0-1-many: 1 recursive call
        assert.deepStrictEqual((0, list_1.rev)((0, list_1.cons)(1, list_1.nil)), (0, list_1.cons)(1, list_1.nil));
        assert.deepStrictEqual((0, list_1.rev)((0, list_1.cons)(2, list_1.nil)), (0, list_1.cons)(2, list_1.nil));
        // 0-1-many: 2+ recursive calls
        assert.deepStrictEqual((0, list_1.rev)((0, list_1.cons)(1, (0, list_1.cons)(2, list_1.nil))), (0, list_1.cons)(2, (0, list_1.cons)(1, list_1.nil)));
        assert.deepStrictEqual((0, list_1.rev)((0, list_1.cons)(1, (0, list_1.cons)(2, (0, list_1.cons)(3, list_1.nil)))), (0, list_1.cons)(3, (0, list_1.cons)(2, (0, list_1.cons)(1, list_1.nil))));
    });
    it('compact_list', function () {
        // 0-1-many: base case (only 1 possible)
        assert.deepStrictEqual((0, list_1.compact_list)(list_1.nil), []);
        // 0-1-many: 1 recursive call
        assert.deepStrictEqual((0, list_1.compact_list)((0, list_1.cons)(1, list_1.nil)), [1]);
        assert.deepStrictEqual((0, list_1.compact_list)((0, list_1.cons)(8, list_1.nil)), [8]);
        // 0-1-many: 2+ recursive calls
        assert.deepStrictEqual((0, list_1.compact_list)((0, list_1.cons)(1, (0, list_1.cons)(2, list_1.nil))), [1, 2]);
        assert.deepStrictEqual((0, list_1.compact_list)((0, list_1.cons)(3, (0, list_1.cons)(2, (0, list_1.cons)(1, list_1.nil)))), [3, 2, 1]);
    });
    it('explode_array', function () {
        // 0-1-many: base case (only 1 possible)
        assert.deepStrictEqual((0, list_1.explode_array)([]), list_1.nil);
        // 0-1-many: 1 recursive call
        assert.deepStrictEqual((0, list_1.explode_array)([1]), (0, list_1.cons)(1, list_1.nil));
        assert.deepStrictEqual((0, list_1.explode_array)([8]), (0, list_1.cons)(8, list_1.nil));
        // 0-1-many: 2+ recursive calls
        assert.deepStrictEqual((0, list_1.explode_array)([1, 2]), (0, list_1.cons)(1, (0, list_1.cons)(2, list_1.nil)));
        assert.deepStrictEqual((0, list_1.explode_array)([1, 2, 3]), (0, list_1.cons)(1, (0, list_1.cons)(2, (0, list_1.cons)(3, list_1.nil))));
    });
});
//# sourceMappingURL=data:application/json;base64,